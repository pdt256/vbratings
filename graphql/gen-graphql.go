// +build ignore

// This program generates schema.go. It can be invoked by running go generate
package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"text/template"
	"time"
)

func main() {
	fmt.Println("Volleyball Ratings GraphQL Schema Generator")
	schemaFile, err := os.Create("schema.go")
	checkError(err)
	defer schemaFile.Close()

	astApp()

	packageTemplate.Execute(schemaFile, struct {
		Timestamp time.Time
	}{
		Timestamp: time.Now(),
	})
}

func astApp() {
	astFile("../app/player_rating.go")
	astFile("../app/player.go")
}

func astFile(filePath string) {
	fs := token.NewFileSet()
	node, err := parser.ParseFile(fs, filePath, nil, parser.ParseComments)
	if err != nil {
		log.Fatal(err)
	}

	visitor := Visitor{}
	ast.Walk(visitor, node)
}

type Visitor struct{}

func (v Visitor) Visit(node ast.Node) (w ast.Visitor) {
	//fmt.Printf("%T\n", node)

	switch n := node.(type) {
	case *ast.TypeSpec:
		fmt.Printf("Domain: %s\n", n.Name.Name)
	case *ast.FuncDecl:
		fmt.Printf("  UseCase: %s\n", n.Name)
		if n.Doc != nil {
			fmt.Printf("    Docs:\n")
			for _, comment := range n.Doc.List {
				fmt.Printf("      %s\n", comment.Text)
			}
		}

		if n.Type.Params.List != nil {
			fmt.Printf("    Params:\n")
			for _, param := range n.Type.Params.List {
				fmt.Printf("      %s %s\n", param.Names[0], param.Type)
			}
		} else {
			fmt.Printf("    [no params]\n")
		}

		if n.Type.Results != nil {
			fmt.Printf("    Return Types:\n")
			for _, result := range n.Type.Results.List {
				switch r := result.Type.(type) {
				case *ast.ArrayType:
					switch s := r.Elt.(type) {
					case *ast.SelectorExpr:
						fmt.Printf("      []%s\n", s.Sel.Name)
					case *ast.Ident:
						fmt.Printf("      []%s\n", s.Name)
					default:
						fmt.Printf(" UNKNOWN %#v\n", s)
					}
				case *ast.Ident:
					fmt.Printf("      %s\n", r.Name)
				default:
					fmt.Printf(" UNKNOWN %#v\n", r)
				}

			}
		} else {
			fmt.Printf("    [no return types]\n")
		}
		fmt.Println()
	}

	return v
}

func checkError(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// {{ .Timestamp }}
package graphql

`))
